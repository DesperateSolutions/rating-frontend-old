/**
 * Webpack DEVELOPMENT settings
 */
const path = require('path');
const fs = require('fs');
const webpack = require('webpack');
const HtmlWebpackPlugin = require('html-webpack-plugin');

/**
 * Select which plugins to use to optimize the bundle's handling of
 * third party dependencies.
 *
 * Currently the CommonsChunkPlugin will be used.
 *
 */
function dependencyHandlers() {
  return [
    new webpack.optimize.CommonsChunkPlugin({
      name: 'vendor',
      children: true,
      minChunks: 2,
      async: true,
    }),
  ];
}

/**
 * We dynamically generate the HTML content in development
 */
function templateContent() {
  const html = fs.readFileSync(
      path.resolve(process.cwd(), 'app/index.html')
  ).toString();

  return html;
}

const plugins = [
  new webpack.HotModuleReplacementPlugin(), // Tell webpack we want hot reloading
  new webpack.NoErrorsPlugin(),
  new HtmlWebpackPlugin({
    inject: true, // Inject all files that are generated by webpack, e.g. bundle.js
    templateContent: templateContent(),
  }),
];

module.exports = require('webpack.config.base.js')({ // eslint-disable-line
  entry: [
    'react-hot-loader/patch',
    'webpack-hot-middleware/client',
    path.join(process.cwd(), 'app/app.jsx'), // Start with app/index.jsx
  ],

  output: {
    path: path.join(__dirname, '/app'),
    filename: '[name].js',
    chunkFilename: '[name].chunk.js',
  },

  devServer: {
    inline: true,
    port: 3333,
    historyApiFallback: true,
  },

  resolve: {
    extensions: ['', '.js', '.jsx'],
    alias: {
      jquery: path.join(__dirname, 'node_modules/jquery/dist/jquery'),
    },
  },

  plugins: [
    new webpack.ProvidePlugin({
      $: 'jquery',
      jQuery: 'jquery',
      'window.$': 'jquery',
      'window.jQuery': 'jquery',
    }),
    dependencyHandlers().concat(plugins),
  ],

  // easier debugging fix
  devtool: 'cheap-module-eval-source-map',
});

